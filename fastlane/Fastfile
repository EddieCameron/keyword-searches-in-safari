# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:mac)

BUILD_DIR = "builds"

def archive_path
  "#{BUILD_DIR}/keysearch.xcarchive"
end

def app_id
  CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
end

def app_path
  "#{BUILD_DIR}/Search Key.app"
end

def zip_path
  "#{BUILD_DIR}/Search Key.zip"
end

def version_number
  get_version_number(target: "Search Key")
end

platform :mac do

  lane :archive do
    xcbuild(
      archive: true,
      archive_path: archive_path,
      scheme: 'keysearch')
  end

  lane :export_archive do
    xcarchive(
      export_archive: true,
      archive_path: archive_path,
      export_path: BUILD_DIR,
      export_options_plist: {
        destination: 'export',
        method: 'developer-id',
        signing_style: 'automatic',
        team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
      }
    )
  end

  lane :notarize_app do
    notarize(
      package: app_path,
      print_log: "true",
      verbose: "true",
      bundle_id: app_id,
      asc_provider: ENV['ASC_PROVIDER']
    )
  end

  lane :zip_app do
    zip(
      path: app_path,
      output_path: zip_path,
      verbose: false,
      symlinks: true
    )
  end

  desc "Build"
  lane :build do
    archive
    export_archive
    notarize_app
    zip_app
  end
  
  lane :bump_version do |options|
    increment_build_number
    increment_version_number( bump_type: options[:bumptype] )
    commit_version_bump(message: "#{version_number}")
  end

  lane :creategithubrelease do
    set_github_release(
      repository_name: 'eddiecameron/keyword-searches-in-safari',
      api_token: ENV['GITHUB_TOKEN'],
      name: "#{version_number}",
      tag_name: "v#{version_number}",
      description: "Version #{version_number}",
      upload_assets: [zip_path]
    )
  end

  lane :uploadtoappstore do
    xcarchive(
      export_archive: true,
      archive_path: archive_path,
      export_path: BUILD_DIR,
      export_options_plist: {
        destination: 'upload',
        method: 'app-store',
        signing_style: 'automatic',
        team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
      }
    )
  end

  lane :release do |options|
    ensure_git_status_clean

    if options[:bumpminor] 
      bump_version(
        bumptype: "minor"
      )
    else
      bump_version(
        bumptype: "patch"
      )
    end

    build
    push_to_git_remote
    creategithubrelease
    uploadtoappstore
  end
end